query GetPool($id: String!, $chain: GqlChain!, $userAddress: String) {
  pool: poolGetPool(id: $id, chain: $chain, userAddress: $userAddress) {
    address
    chain
    createTime
    decimals
    dynamicData {
      aprItems {
        apr
        id
        rewardTokenAddress
        rewardTokenSymbol
        title
        type
      }
      fees24h
      holdersCount
      isInRecoveryMode
      isPaused
      poolId
      surplus24h
      swapEnabled
      swapFee
      totalLiquidity
      totalShares
      volume24h
    }
    factory
    hasErc4626
    hasNestedErc4626
    hook {
      ...Hook
    }
    id
    liquidityManagement {
      disableUnbalancedLiquidity
    }
    name
    owner
    pauseManager
    poolCreator
    poolTokens {
      ...PoolTokens
    }
    protocolVersion
    staking {
      address
      aura {
        apr
        auraPoolAddress
        auraPoolId
        id
        isShutdown
      }
      chain
      gauge {
        gaugeAddress
        id
        otherGauges {
          gaugeAddress
          id
          rewards {
            id
            rewardPerSecond
            tokenAddress
          }
          status
          version
        }
        rewards {
          id
          rewardPerSecond
          tokenAddress
        }
        status
        version
        workingSupply
      }
      reliquary {
        levels {
          level
          balance
          apr
          allocationPoints
        }
        beetsPerSecond
        totalBalance
      }
      id
      type
    }
    swapFeeManager
    symbol
    tags
    type
    userBalance {
      stakedBalances {
        balance
        balanceUsd
        stakingId
        stakingType
      }
      totalBalance
      totalBalanceUsd
      walletBalance
      walletBalanceUsd
    }
    version
    ... on GqlPoolComposableStable {
      amp
      bptPriceRate
      nestingType
    }
    ... on GqlPoolElement {
      baseToken
      principalToken
      unitSeconds
    }
    ... on GqlPoolFx {
      alpha
      beta
      delta
      epsilon
      lambda
    }
    ... on GqlPoolLiquidityBootstrappingV3 {
      endTime
      lbpName
      lbpOwner
      description
      discord
      isProjectTokenSwapInBlocked
      poolTokens {
        ...PoolTokens
      }
      projectToken
      projectTokenIndex
      projectTokenEndWeight
      projectTokenStartWeight
      reserveToken
      reserveTokenIndex
      telegram
      startTime
      website
      x
      topTrades {
        address
        value
      }
    }
    ... on GqlPoolGyro {
      alpha
      beta
      c
      dSq
      lambda
      nestingType
      root3Alpha
      s
      sqrtAlpha
      sqrtBeta
      tauAlphaX
      tauAlphaY
      tauBetaX
      tauBetaY
      type
      u
      v
      w
      z
    }
    ... on GqlPoolLiquidityBootstrapping {
      nestingType
    }
    ... on GqlPoolMetaStable {
      amp
    }
    ... on GqlPoolQuantAmmWeighted {
      hasAnyAllowedBuffer
      weightSnapshots {
        timestamp
        weights
      }
      poolTokens {
        ...PoolTokens
      }
    }
    ... on GqlPoolReClamm {
      centerednessMargin
      currentFourthRootPriceRatio
      dailyPriceShiftBase
      endFourthRootPriceRatio
      hasAnyAllowedBuffer
      lastTimestamp
      lastVirtualBalances
      priceRatioUpdateEndTime
      priceRatioUpdateStartTime
      startFourthRootPriceRatio
    }
    ... on GqlPoolStable {
      amp
    }
    ... on GqlPoolWeighted {
      nestingType
    }
  }
}

query GetPoolSnapshots($poolId: String!, $range: GqlPoolSnapshotDataRange!, $chainId: GqlChain!) {
  snapshots: poolGetSnapshots(id: $poolId, range: $range, chain: $chainId) {
    id
    timestamp
    totalLiquidity
    volume24h
    fees24h
    surplus24h
    sharePrice
  }
}

query GetPoolTokensDynamicData($addresses: [String!]!) {
  staticData: tokenGetTokensData(addresses: $addresses) {
    id
    tokenAddress
    description
    discordUrl
    telegramUrl
    twitterUsername
    websiteUrl
  }
  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {
    ...GqlTokenDynamicData
  }
}

query GetPoolEvents(
  $first: Int
  $skip: Int
  $poolId: String
  $chainIn: [GqlChain!]!
  $type: GqlPoolEventType
  $userAddress: String
) {
  poolEvents(
    first: $first
    skip: $skip
    where: { poolId: $poolId, chainIn: $chainIn, type: $type, userAddress: $userAddress }
  ) {
    id
    poolId
    timestamp
    tx
    type
    valueUSD
    chain
    userAddress
    ... on GqlPoolSwapEventV3 {
      tokenIn {
        address
        amount
      }
      tokenOut {
        address
        amount
      }
    }
    ... on GqlPoolSwapEventCowAmm {
      tokenIn {
        address
        amount
        valueUSD
      }
      tokenOut {
        address
        amount
        valueUSD
      }
      surplus {
        address
        amount
        valueUSD
      }
    }
    ... on GqlPoolAddRemoveEventV3 {
      tokens {
        address
        amount
        valueUSD
      }
    }
  }
}
